const { ethers } = require('ethers');
const { LEADS_ABI, LEADS_CONTRACT_ADDRESS, NETWORK_CONFIG, DEFAULT_NETWORK } = require('./contract-config');

async function testBaseConfiguration() {
  console.log('üß™ Test de la configuration Base\n');
  
  try {
    // Test 1: V√©rification de la configuration
    console.log('1Ô∏è‚É£ V√©rification de la configuration...');
    console.log(`   R√©seau par d√©faut: ${DEFAULT_NETWORK}`);
    console.log(`   Adresse du contrat: ${LEADS_CONTRACT_ADDRESS}`);
    console.log(`   Configuration Base:`, JSON.stringify(NETWORK_CONFIG.base, null, 2));
    
    // Test 2: Test de connexion au r√©seau Base
    console.log('\n2Ô∏è‚É£ Test de connexion au r√©seau Base...');
    const provider = new ethers.JsonRpcProvider(NETWORK_CONFIG.base.rpc);
    
    // V√©rifier la connexion
    const blockNumber = await provider.getBlockNumber();
    console.log(`   Block actuel sur Base: ${blockNumber}`);
    
    // Test 3: V√©rification du contrat
    console.log('\n3Ô∏è‚É£ V√©rification du contrat...');
    const code = await provider.getCode(LEADS_CONTRACT_ADDRESS);
    if (code !== '0x') {
      console.log('   ‚úÖ Contrat trouv√© sur Base');
      
      // Cr√©er une instance du contrat
      const contract = new ethers.Contract(LEADS_CONTRACT_ADDRESS, LEADS_ABI, provider);
      
      // Test 4: R√©cup√©ration des prix
      console.log('\n4Ô∏è‚É£ Test de r√©cup√©ration des prix...');
      try {
        const [priceBase, priceMedium, priceHigh, priceLow] = await Promise.all([
          contract.price_base(),
          contract.price_medium(),
          contract.price_high(),
          contract.price_low()
        ]);
        
        console.log('   Prix r√©cup√©r√©s:');
        console.log(`     Base: ${ethers.formatEther(priceBase)} ETH`);
        console.log(`     Medium: ${ethers.formatEther(priceMedium)} ETH`);
        console.log(`     High: ${ethers.formatEther(priceHigh)} ETH`);
        console.log(`     Low: ${ethers.formatEther(priceLow)} ETH`);
      } catch (error) {
        console.log(`   ‚ùå Erreur lors de la r√©cup√©ration des prix: ${error.message}`);
      }
      
      // Test 5: Test avec une adresse fictive
      console.log('\n5Ô∏è‚É£ Test avec une adresse fictive...');
      const testAddress = '0x1234567890123456789012345678901234567890';
      try {
        const leadsCount = await contract.getLeads(2, testAddress);
        console.log(`   Leads pour ${testAddress}: ${leadsCount.toString()}`);
      } catch (error) {
        console.log(`   ‚ùå Erreur lors de la r√©cup√©ration des leads: ${error.message}`);
      }
      
    } else {
      console.log('   ‚ùå Contrat non trouv√© sur Base');
    }
    
    console.log('\nüéâ Tests de configuration Base termin√©s!');
    
  } catch (error) {
    console.error('üí• Erreur lors des tests:', error.message);
  }
}

// Ex√©cuter les tests si le script est appel√© directement
if (require.main === module) {
  testBaseConfiguration()
    .then(() => {
      console.log('\n‚úÖ Tests de configuration Base termin√©s avec succ√®s');
      process.exit(0);
    })
    .catch(error => {
      console.error('\n‚ùå Tests de configuration Base √©chou√©s:', error.message);
      process.exit(1);
    });
}

module.exports = { testBaseConfiguration }; 